"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Field = void 0;
const getMetadataStorage_1 = require("../metadata/getMetadataStorage");
const findType_1 = require("../helpers/findType");
const decorators_1 = require("../helpers/decorators");
const errors_1 = require("../errors");
function Field(returnTypeFuncOrOptions, maybeOptions) {
    return (prototype, propertyKey, descriptor) => {
        var _a, _b;
        if (typeof propertyKey === 'symbol') {
            throw new errors_1.SymbolKeysNotSupportedError();
        }
        const { options, returnTypeFunc } = (0, decorators_1.getTypeDecoratorParams)(returnTypeFuncOrOptions, maybeOptions);
        const isResolver = Boolean(descriptor);
        const isResolverMethod = Boolean(descriptor === null || descriptor === void 0 ? void 0 : descriptor.value);
        const { getType, typeOptions } = (0, findType_1.findType)({
            metadataKey: isResolverMethod ? 'design:returntype' : 'design:type',
            prototype,
            propertyKey,
            returnTypeFunc,
            typeOptions: options
        });
        (0, getMetadataStorage_1.getMetadataStorage)().collectClassFieldMetadata({
            name: propertyKey,
            schemaName: (_a = options.name) !== null && _a !== void 0 ? _a : propertyKey,
            getType,
            typeOptions,
            complexity: options.complexity,
            target: prototype.constructor,
            description: options.description,
            deprecationReason: options.deprecationReason,
            simple: options.simple
        });
        if (isResolver) {
            (0, getMetadataStorage_1.getMetadataStorage)().collectFieldResolverMetadata({
                kind: 'internal',
                methodName: propertyKey,
                schemaName: (_b = options.name) !== null && _b !== void 0 ? _b : propertyKey,
                target: prototype.constructor,
                complexity: options.complexity
            });
        }
    };
}
exports.Field = Field;
//# sourceMappingURL=Field.js.map